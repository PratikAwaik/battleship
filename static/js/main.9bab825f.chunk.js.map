{"version":3,"sources":["components/GameContext.js","utils.js","components/Board.js","components/Ship.js","gameLogic/ship.js","gameLogic/gameboard.js","gameLogic/player.js","images/logo.png","components/Game.js","App.js","index.js"],"names":["GameContext","React","createContext","positionFound","arr","position","find","ele","JSON","stringify","getIndex","index","ind","Board","props","grid","useContext","className","map","square","id","onClick","e","isComputer","handleClick","Ship","shipsOrientation","setShipsOrientation","humanPlayer","setHumanPlayer","setAllShipsPlaced","i","shipLength","push","data-name","name","draggable","onDragEnd","dragEndElement","document","elementFromPoint","clientX","clientY","getAttribute","parseInt","shipName","target","newHumanPlayer","Object","assign","create","getPrototypeOf","board","isValidPosition","isHorizontal","placeShip","getElementById","classList","add","style","display","ships","querySelector","aliveShips","length","handleDragEnd","parentElement","isPlaced","height","width","flexDirection","newShipsOrientation","parse","alterDirection","item","this","hits","hit","bind","isSunk","hitPosition","Gameboard","boardSize","filledShipPositions","availableShipPositions","availableAttackPositions","setAvailableShipPositions","getAdjacentPositionsHorizontal","getAdjacentPositionsVertical","getRandomPosition","receiveAttack","allShipsSank","j","splice","placePosition","adjacentPositionsHorizontal","adjacentPositionsVertical","pos","isShipPosition","isHitPosition","Math","floor","random","newShip","orientation","keys","forEach","randomDirection","randomPosition","ship","currShipLength","Player","enemy","Game","useState","setGrid","computerPlayer","setComputerPlayer","allShipsPlaced","winner","setWinner","humanPlayerTurn","setHumanPlayerTurn","startGameBtnClicked","setStartGameBtnClicked","carrier","battleship","cruiser","submarine","destroyer","state","useEffect","newGrid","src","battleshipLogo","alt","textContent","childNodes","querySelectorAll","removeChild","newComputerPlayer","placeShipsRandomly","startGame","placeRandom","Provider","value","attackEnemy","div","createElement","console","log","appendChild","pointerEvents","zIndex","opacity","setTimeout","randomHitPosition","boardSquare","App","ReactDOM","render"],"mappings":"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","file":"static/js/main.9bab825f.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const GameContext = React.createContext(null);\n","export function positionFound(arr, position) {\n  return arr.find((ele) => JSON.stringify(ele) === JSON.stringify(position))\n    ? true\n    : false;\n}\n\nexport function getIndex(arr, position) {\n  let index = null;\n  arr.find((ele, ind) =>\n    JSON.stringify(ele) === JSON.stringify(position) ? (index = ind) : null,\n  );\n  return index;\n}\n","import React, { useContext } from \"react\";\nimport { GameContext } from \"./GameContext\";\n\nexport default function Board(props) {\n  const { grid } = useContext(GameContext);\n\n  return (\n    <div className=\"board\">\n      {grid.map((square, index) => {\n        return (\n          <div\n            key={index}\n            id={index}\n            className=\"board-square\"\n            onClick={(e) =>\n              props.isComputer ? props.handleClick(e) : null\n            }></div>\n        );\n      })}\n    </div>\n  );\n}\n","import React, { useContext } from \"react\";\nimport { GameContext } from \"./GameContext\";\n\nexport default function Ship(props) {\n  const { grid } = useContext(GameContext);\n  const { shipsOrientation, setShipsOrientation } = useContext(GameContext);\n  const { humanPlayer, setHumanPlayer } = useContext(GameContext);\n  const { setAllShipsPlaced } = useContext(GameContext);\n\n  const arr = [];\n  for (let i = 0; i < props.shipLength; i++) {\n    arr.push(i);\n  }\n\n  const handleDragEnd = (e) => {\n    const dragEndElement = document.elementFromPoint(e.clientX, e.clientY);\n    if (dragEndElement.getAttribute(\"class\") === \"board-square\") {\n      const position = grid[parseInt(dragEndElement.id)];\n      const shipName = e.target.getAttribute(\"data-name\");\n      const shipLength = shipsOrientation[shipName].shipLength;\n      const newHumanPlayer = Object.assign(\n        Object.create(Object.getPrototypeOf(humanPlayer)),\n        humanPlayer,\n      );\n      if (\n        newHumanPlayer.board.isValidPosition(\n          shipLength,\n          position,\n          shipsOrientation[shipName].isHorizontal,\n        )\n      ) {\n        newHumanPlayer.board.placeShip(\n          shipLength,\n          position,\n          shipsOrientation[shipName].isHorizontal,\n        );\n\n        for (let i = 0; i < shipLength; i++) {\n          if (shipsOrientation[shipName].isHorizontal) {\n            const boardSquare = document.getElementById(\n              `${parseInt(dragEndElement.id) + i}`,\n            );\n            boardSquare.classList.add(\"ship-position\");\n          } else {\n            const boardSquare = document.getElementById(\n              `${parseInt(dragEndElement.id) + 10 * i}`,\n            );\n            boardSquare.classList.add(\"ship-position\");\n          }\n        }\n        e.target.style.display = \"none\";\n        const ships = document.querySelector(\".ships\");\n\n        if (newHumanPlayer.board.aliveShips.length === 5) {\n          setAllShipsPlaced(true);\n          ships.style.display = \"none\";\n        }\n        setHumanPlayer(newHumanPlayer);\n      }\n    }\n  };\n\n  const alterDirection = (e) => {\n    const shipName = e.target.parentElement.getAttribute(\"data-name\");\n    const shipLength = shipsOrientation[shipName].shipLength;\n\n    if (!shipsOrientation[shipName].isPlaced) {\n      if (shipsOrientation[shipName].isHorizontal) {\n        e.target.parentElement.style.height = `${5 * shipLength}rem`;\n        e.target.parentElement.style.width = \"5rem\";\n        e.target.parentElement.style.flexDirection = \"column\";\n        const newShipsOrientation = JSON.parse(\n          JSON.stringify(shipsOrientation),\n        );\n        newShipsOrientation[shipName].isHorizontal = false;\n        setShipsOrientation(newShipsOrientation);\n      } else {\n        e.target.parentElement.style.width = `${5 * shipLength}rem`;\n        e.target.parentElement.style.height = \"5rem\";\n        e.target.parentElement.style.flexDirection = \"row\";\n        const newShipsOrientation = JSON.parse(\n          JSON.stringify(shipsOrientation),\n        );\n        newShipsOrientation[shipName].isHorizontal = true;\n        setShipsOrientation(newShipsOrientation);\n      }\n    }\n  };\n\n  return (\n    <div\n      className={`ship-${props.index + 1} ship`}\n      data-name={props.name}\n      draggable=\"true\"\n      onDragEnd={(e) => handleDragEnd(e)}\n      onClick={(e) => alterDirection(e)}>\n      {arr.map((item, index) => {\n        return <div key={index}></div>;\n      })}\n    </div>\n  );\n}\n","export default class Ship {\n  constructor(length, position, isHorizontal) {\n    this.shipLength = length;\n    this.position = position;\n    this.isHorizontal = isHorizontal;\n    this.hits = 0;\n    this.hit = this.hit.bind(this);\n    this.isSunk = this.isSunk.bind(this);\n  }\n\n  hit(hitPosition) {\n    if (\n      this.isHorizontal &&\n      hitPosition[0] >= this.position[0] &&\n      hitPosition[0] <= this.position[0] + this.shipLength - 1 &&\n      hitPosition[1] === this.position[1]\n    ) {\n      this.hits += 1;\n      return true;\n    } else if (\n      !this.isHorizontal &&\n      hitPosition[1] >= this.position[1] &&\n      hitPosition[1] <= this.position[1] + this.shipLength - 1 &&\n      hitPosition[0] === this.position[0]\n    ) {\n      this.hits += 1;\n      return true;\n    }\n\n    return false;\n  }\n\n  isSunk() {\n    if (this.hits === this.shipLength) return true;\n    return false;\n  }\n}\n","import { positionFound, getIndex } from \"../utils\";\nimport Ship from \"./ship\";\n\nexport default class Gameboard {\n  constructor(boardSize) {\n    this.boardSize = boardSize;\n    this.filledShipPositions = [];\n    this.availableShipPositions = [];\n    this.availableAttackPositions = [];\n    this.aliveShips = [];\n\n    this.setAvailableShipPositions = this.setAvailableShipPositions.bind(this);\n    this.getAdjacentPositionsHorizontal = this.getAdjacentPositionsHorizontal.bind(\n      this,\n    );\n    this.getAdjacentPositionsVertical = this.getAdjacentPositionsVertical.bind(\n      this,\n    );\n\n    this.getRandomPosition = this.getRandomPosition.bind(this);\n    this.placeShip = this.placeShip.bind(this);\n    this.receiveAttack = this.receiveAttack.bind(this);\n    this.allShipsSank = this.allShipsSank.bind(this);\n    this.isValidPosition = this.isValidPosition.bind(this);\n\n    for (let i = 0; i < this.boardSize; i++) {\n      for (let j = 0; j < this.boardSize; j++) {\n        this.availableAttackPositions.push([j, i]);\n        this.availableShipPositions.push([j, i]);\n      }\n    }\n  }\n\n  setAvailableShipPositions() {\n    const availableShipPositions = JSON.parse(\n      JSON.stringify(this.availableShipPositions),\n    );\n\n    for (let position of availableShipPositions) {\n      if (positionFound(this.filledShipPositions, position))\n        this.availableShipPositions.splice(\n          getIndex(this.availableShipPositions, position),\n          1,\n        );\n    }\n  }\n\n  getAdjacentPositionsHorizontal(shipLength, placePosition) {\n    const adjacentPositionsHorizontal = [];\n    for (let i = 0; i < shipLength; i++) {\n      if (i === 0) {\n        adjacentPositionsHorizontal.push([\n          placePosition[0] - 1,\n          placePosition[1],\n        ]);\n        adjacentPositionsHorizontal.push([\n          placePosition[0],\n          placePosition[1] + 1,\n        ]);\n        adjacentPositionsHorizontal.push([\n          placePosition[0],\n          placePosition[1] - 1,\n        ]);\n        adjacentPositionsHorizontal.push([\n          placePosition[0] - 1,\n          placePosition[1] + 1,\n        ]);\n        adjacentPositionsHorizontal.push([\n          placePosition[0] - 1,\n          placePosition[1] - 1,\n        ]);\n      } else if (i === shipLength - 1) {\n        adjacentPositionsHorizontal.push([\n          placePosition[0] + shipLength,\n          placePosition[1],\n        ]);\n        adjacentPositionsHorizontal.push([\n          placePosition[0] + shipLength - 1,\n          placePosition[1] + 1,\n        ]);\n        adjacentPositionsHorizontal.push([\n          placePosition[0] + shipLength - 1,\n          placePosition[1] - 1,\n        ]);\n        adjacentPositionsHorizontal.push([\n          placePosition[0] + shipLength,\n          placePosition[1] + 1,\n        ]);\n        adjacentPositionsHorizontal.push([\n          placePosition[0] + shipLength,\n          placePosition[1] - 1,\n        ]);\n      } else {\n        adjacentPositionsHorizontal.push([\n          placePosition[0] + i,\n          placePosition[1] + 1,\n        ]);\n        adjacentPositionsHorizontal.push([\n          placePosition[0] + i,\n          placePosition[1] - 1,\n        ]);\n      }\n    }\n    return adjacentPositionsHorizontal;\n  }\n\n  getAdjacentPositionsVertical(shipLength, placePosition) {\n    const adjacentPositionsVertical = [];\n    for (let i = 0; i < shipLength; i++) {\n      if (i === 0) {\n        adjacentPositionsVertical.push([\n          placePosition[0] - 1,\n          placePosition[1],\n        ]);\n        adjacentPositionsVertical.push([\n          placePosition[0] + 1,\n          placePosition[1],\n        ]);\n        adjacentPositionsVertical.push([\n          placePosition[0],\n          placePosition[1] - 1,\n        ]);\n        adjacentPositionsVertical.push([\n          placePosition[0] - 1,\n          placePosition[1] - 1,\n        ]);\n        adjacentPositionsVertical.push([\n          placePosition[0] + 1,\n          placePosition[1] - 1,\n        ]);\n      } else if (i === shipLength - 1) {\n        adjacentPositionsVertical.push([\n          placePosition[0] - 1,\n          placePosition[1] + shipLength - 1,\n        ]);\n        adjacentPositionsVertical.push([\n          placePosition[0] + 1,\n          placePosition[1] + shipLength - 1,\n        ]);\n        adjacentPositionsVertical.push([\n          placePosition[0],\n          placePosition[1] + shipLength,\n        ]);\n        adjacentPositionsVertical.push([\n          placePosition[0] + 1,\n          placePosition[1] + shipLength,\n        ]);\n        adjacentPositionsVertical.push([\n          placePosition[0] - 1,\n          placePosition[1] + shipLength,\n        ]);\n      } else {\n        adjacentPositionsVertical.push([\n          placePosition[0] - 1,\n          placePosition[1] + i,\n        ]);\n        adjacentPositionsVertical.push([\n          placePosition[0] + 1,\n          placePosition[1] + i,\n        ]);\n      }\n    }\n\n    return adjacentPositionsVertical;\n  }\n\n  isValidPosition(shipLength, placePosition, isHorizontal) {\n    this.setAvailableShipPositions();\n\n    if (\n      placePosition[0] >= 0 &&\n      placePosition[0] < this.boardSize &&\n      placePosition[1] >= 0 &&\n      placePosition[1] < this.boardSize &&\n      positionFound(this.availableShipPositions, placePosition)\n    ) {\n      if (isHorizontal && placePosition[0] + shipLength - 1 < this.boardSize) {\n        const adjacentPositionsHorizontal = this.getAdjacentPositionsHorizontal(\n          shipLength,\n          placePosition,\n        );\n        const isAdjacent = adjacentPositionsHorizontal.find((ele) =>\n          this.filledShipPositions.find(\n            (pos) => JSON.stringify(pos) === JSON.stringify(ele),\n          ),\n        )\n          ? true\n          : false;\n\n        if (!isAdjacent) {\n          return true;\n        }\n      } else if (\n        !isHorizontal &&\n        placePosition[1] + shipLength - 1 < this.boardSize\n      ) {\n        const adjacentPositionsVertical = this.getAdjacentPositionsVertical(\n          shipLength,\n          placePosition,\n        );\n\n        const isAdjacent = adjacentPositionsVertical.find((ele) =>\n          this.filledShipPositions.find(\n            (pos) => JSON.stringify(pos) === JSON.stringify(ele),\n          ),\n        )\n          ? true\n          : false;\n\n        if (!isAdjacent) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  getRandomPosition(isShipPosition, isHitPosition, shipLength, isHorizontal) {\n    if (isShipPosition) {\n      let placePosition = null;\n      while (true) {\n        placePosition = this.availableShipPositions[\n          Math.floor(Math.random() * this.availableShipPositions.length)\n        ];\n        if (this.isValidPosition(shipLength, placePosition, isHorizontal))\n          break;\n      }\n\n      return placePosition;\n    } else if (isHitPosition) {\n      return this.availableAttackPositions[\n        Math.floor(Math.random() * this.availableAttackPositions.length)\n      ];\n    }\n  }\n\n  placeShip(shipLength, placePosition, isHorizontal) {\n    const newShip = new Ship(shipLength, placePosition, isHorizontal);\n    this.aliveShips.push(newShip);\n    for (let i = 0; i < shipLength; i++) {\n      if (isHorizontal)\n        this.filledShipPositions.push([placePosition[0] + i, placePosition[1]]);\n      else\n        this.filledShipPositions.push([placePosition[0], placePosition[1] + i]);\n    }\n  }\n\n  placeShipsRandomly(orientation) {\n    Object.keys(orientation).forEach((shipName) => {\n      const randomDirection = Math.random() > 0.5 ? true : false;\n      const shipLength = orientation[shipName].shipLength;\n      const randomPosition = this.getRandomPosition(\n        true,\n        false,\n        shipLength,\n        randomDirection,\n      );\n      this.placeShip(shipLength, randomPosition, randomDirection);\n    });\n  }\n\n  receiveAttack(hitPosition) {\n    const aliveShips = [...this.aliveShips];\n\n    for (let ship of aliveShips) {\n      if (ship.hit(hitPosition) && ship.isSunk()) {\n        ship.currShipLength = ship.length;\n        this.aliveShips.splice(getIndex(this.aliveShips, ship), 1);\n      }\n    }\n    this.availableAttackPositions.splice(\n      getIndex(this.availableAttackPositions, hitPosition),\n      1,\n    );\n  }\n\n  allShipsSank() {\n    if (this.aliveShips.length === 0) return true;\n    return false;\n  }\n}\n","import Gameboard from \"./gameboard\";\n\nexport default class Player {\n  constructor() {\n    this.board = new Gameboard(10);\n  }\n\n  attackEnemy(enemy, hitPosition) {\n    enemy.board.receiveAttack(hitPosition);\n  }\n}\n","export default __webpack_public_path__ + \"static/media/logo.dc5cde12.png\";","import React, { useState, useEffect } from \"react\";\nimport { GameContext } from \"./GameContext\";\nimport { getIndex, positionFound } from \"../utils\";\nimport Board from \"./Board\";\nimport Ship from \"./Ship\";\nimport Player from \"../gameLogic/player\";\nimport battleshipLogo from \"../images/logo.png\";\n\nexport default function Game() {\n  const [grid, setGrid] = useState([]);\n  const [humanPlayer, setHumanPlayer] = useState(null);\n  const [computerPlayer, setComputerPlayer] = useState(null);\n  const [allShipsPlaced, setAllShipsPlaced] = useState(false);\n  const [winner, setWinner] = useState(null);\n  const [humanPlayerTurn, setHumanPlayerTurn] = useState(null);\n  const [startGameBtnClicked, setStartGameBtnClicked] = useState(false);\n  const [shipsOrientation, setShipsOrientation] = useState({\n    carrier: { shipLength: 5, isHorizontal: true },\n    battleship: { shipLength: 4, isHorizontal: true },\n    cruiser: { shipLength: 3, isHorizontal: true },\n    submarine: { shipLength: 3, isHorizontal: true },\n    destroyer: { shipLength: 2, isHorizontal: true },\n  });\n\n  const state = {\n    grid,\n    humanPlayer,\n    setHumanPlayer,\n    allShipsPlaced,\n    setAllShipsPlaced,\n    winner,\n    setWinner,\n    humanPlayerTurn,\n    setHumanPlayerTurn,\n    startGameBtnClicked,\n    setStartGameBtnClicked,\n    shipsOrientation,\n    setShipsOrientation,\n  };\n\n  useEffect(() => {\n    setHumanPlayer(new Player());\n    setComputerPlayer(new Player());\n    const newGrid = [];\n    for (let i = 0; i < 10; i++) {\n      for (let j = 0; j < 10; j++) {\n        newGrid.push([j, i]);\n      }\n    }\n    setGrid(newGrid);\n  }, []);\n\n  const handleClick = (e) => {\n    // game loop\n    const newHumanPlayer = Object.assign(\n      Object.create(Object.getPrototypeOf(humanPlayer)),\n      humanPlayer,\n    );\n    const newComputerPlayer = Object.assign(\n      Object.create(Object.getPrototypeOf(computerPlayer)),\n      computerPlayer,\n    );\n    newHumanPlayer.attackEnemy(newComputerPlayer, grid[e.target.id]);\n    const div = document.createElement(\"div\");\n    console.log(\"Player Attacked\");\n    if (\n      positionFound(\n        newComputerPlayer.board.filledShipPositions,\n        grid[e.target.id],\n      )\n    ) {\n      div.classList.add(\"successful-attack\");\n    } else {\n      div.classList.add(\"unsuccessful-attack\");\n    }\n    e.target.appendChild(div);\n    e.target.style.pointerEvents = \"none\";\n    e.target.parentElement.style.zIndex = \"-10\";\n    e.target.parentElement.style.opacity = \"0.2\";\n\n    if (newComputerPlayer.board.allShipsSank()) {\n      setWinner(\"human\");\n      setHumanPlayerTurn(null);\n      e.target.parentElement.style.zIndex = \"-10\";\n      e.target.parentElement.style.opacity = \"0.2\";\n\n      setAllShipsPlaced(true);\n      const startGameBtn = document.querySelector(\".start-game-btn\");\n      startGameBtn.textContent = \"Restart Game\";\n      return;\n    } else {\n      setHumanPlayerTurn(false);\n    }\n\n    // attack on player after 1.5s\n    setTimeout(function () {\n      const randomHitPosition = newHumanPlayer.board.getRandomPosition(\n        false,\n        true,\n      );\n\n      newComputerPlayer.attackEnemy(newHumanPlayer, randomHitPosition);\n      console.log(\"Computer Attacked\");\n      const index = getIndex(grid, randomHitPosition);\n      const boardSquare = document.querySelectorAll(\n        `.player-board .board .board-square`,\n      )[index];\n      const div = document.createElement(\"div\");\n      if (\n        positionFound(\n          newHumanPlayer.board.filledShipPositions,\n          randomHitPosition,\n        )\n      ) {\n        div.classList.add(\"successful-attack\");\n      } else {\n        div.classList.add(\"unsuccessful-attack\");\n      }\n      boardSquare.appendChild(div);\n      e.target.parentElement.style.zIndex = \"10\";\n      e.target.parentElement.style.opacity = \"1\";\n\n      if (newHumanPlayer.board.allShipsSank()) {\n        setWinner(\"computer\");\n        setHumanPlayerTurn(null);\n        e.target.parentElement.style.zIndex = \"-10\";\n        e.target.parentElement.style.opacity = \"0.2\";\n\n        setAllShipsPlaced(true);\n        const startGameBtn = document.querySelector(\".start-game-btn\");\n        startGameBtn.textContent = \"Restart Game\";\n        return;\n      } else {\n        setHumanPlayerTurn(true);\n      }\n\n      setHumanPlayer(newHumanPlayer);\n      setComputerPlayer(newComputerPlayer);\n    }, 1500);\n  };\n\n  const placeRandom = (e) => {\n    const newHumanPlayer = Object.assign(\n      Object.create(Object.getPrototypeOf(humanPlayer)),\n      humanPlayer,\n    );\n\n    newHumanPlayer.board.placeShipsRandomly(shipsOrientation);\n\n    newHumanPlayer.board.filledShipPositions.forEach((position) => {\n      const index = getIndex(grid, position);\n      const boardSquare = document.querySelectorAll(\n        \".player-board .board .board-square\",\n      )[index];\n      boardSquare.classList.add(\"ship-position\");\n    });\n\n    document.querySelector(\".ships\").style.display = \"none\";\n\n    setHumanPlayer(newHumanPlayer);\n    setAllShipsPlaced(true);\n  };\n\n  const startGame = (e) => {\n    if (e.target.textContent === \"Restart Game\") {\n      setHumanPlayer(new Player());\n      setComputerPlayer(new Player());\n      setStartGameBtnClicked(false);\n      setAllShipsPlaced(false);\n      setWinner(null);\n      e.target.textContent = \"Start Game\";\n\n      const ships = document.querySelector(\".ships\");\n      ships.style.display = \"block\";\n      ships.childNodes.forEach((ship) => (ship.style.display = \"flex\"));\n\n      const playerBoardSquares = document.querySelectorAll(\n        \".player-board .board .board-square\",\n      );\n\n      playerBoardSquares.forEach((square) => {\n        square.className = \"board-square\";\n        if (square.childNodes.length > 0) {\n          square.removeChild(square.childNodes[0]);\n        }\n      });\n    } else {\n      const newComputerPlayer = Object.assign(\n        Object.create(Object.getPrototypeOf(computerPlayer)),\n        computerPlayer,\n      );\n\n      newComputerPlayer.board.placeShipsRandomly(shipsOrientation);\n\n      setComputerPlayer(newComputerPlayer);\n      setStartGameBtnClicked(true);\n      setHumanPlayerTurn(true);\n      setAllShipsPlaced(false);\n    }\n  };\n\n  return (\n    <div className=\"game-container\">\n      <div className=\"game-heading\">\n        <img src={battleshipLogo} alt=\"Battleship game logo\" />\n        <h1>Battleship</h1>\n      </div>\n      <div className=\"game-instructions\">\n        <h2>Instructions</h2>\n        <ul>\n          <li>Click on the ship to rotate it.</li>\n          <li>\n            Drag the head of the block and drop it on the board to place it.\n          </li>\n          <li>\n            Once all your ships are placed, click on the button to start the\n            game.\n          </li>\n        </ul>\n      </div>\n\n      <div className=\"game-rules\">\n        <h2>Rules</h2>\n        <ul>\n          <li>You cannot place the ships adjacent to each other.</li>\n          <li>The player who destroys all the enemy's ships wins.</li>\n        </ul>\n      </div>\n\n      <button\n        className=\"start-game-btn\"\n        onClick={(e) => startGame(e)}\n        style={{ display: allShipsPlaced ? \"block\" : \"none\" }}>\n        Start Game\n      </button>\n\n      {!allShipsPlaced &&\n      !startGameBtnClicked &&\n      (humanPlayer ? humanPlayer.board.aliveShips.length === 0 : false) ? (\n        <button className=\"place-random-btn\" onClick={(e) => placeRandom(e)}>\n          Place Randomly\n        </button>\n      ) : null}\n\n      {winner === \"human\" ? (\n        <p className=\"winner-text\">Game Over! You Win</p>\n      ) : winner === \"computer\" ? (\n        <p className=\"winner-text\">Game Over! Computer Win</p>\n      ) : null}\n\n      <GameContext.Provider value={state}>\n        <div className=\"board-container\">\n          <div className=\"player-board\">\n            <h3>Your Battlefield</h3>\n            <Board isComputer={false} />\n          </div>\n\n          <div className=\"ships\">\n            {Object.keys(shipsOrientation).map((shipName, index) => {\n              return (\n                <Ship\n                  key={index}\n                  index={index}\n                  shipLength={shipsOrientation[shipName].shipLength}\n                  name={shipName}\n                  humanPlayer={humanPlayer}\n                />\n              );\n            })}\n          </div>\n\n          {humanPlayerTurn === true ? (\n            <p className=\"player-turn\">Your Turn</p>\n          ) : humanPlayerTurn === false ? (\n            <p className=\"player-turn\">Computer's Turn</p>\n          ) : null}\n\n          {startGameBtnClicked ? (\n            <div className=\"computer-board\">\n              <h3>Computer's Battlefield</h3>\n              <Board isComputer={true} handleClick={handleClick} />\n            </div>\n          ) : null}\n        </div>\n      </GameContext.Provider>\n    </div>\n  );\n}\n","import React from \"react\";\nimport Game from \"./components/Game\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/reset.css\";\nimport \"./styles/index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}